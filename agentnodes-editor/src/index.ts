import { app, BrowserWindow, ipcMain } from 'electron';
import * as path from 'path';
import * as fs from 'fs/promises';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Get the application directory (where package.json is)
const getAppDirectory = () => {
  // In development, app.getAppPath() points to the source directory
  // In production, it would point to the packaged app directory
  return app.getAppPath();
};

// File system IPC handlers
ipcMain.handle('fs:readFile', async (event, filePath: string, encoding: string) => {
  try {
    const resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(getAppDirectory(), filePath);
    const data = await fs.readFile(resolvedPath, encoding as BufferEncoding);
    return data;
  } catch (error) {
    throw new Error(`Failed to read file: ${error}`);
  }
});

ipcMain.handle('fs:writeFile', async (event, filePath: string, content: string, encoding: string) => {
  try {
    const resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(getAppDirectory(), filePath);
    await fs.writeFile(resolvedPath, content, encoding as BufferEncoding);
  } catch (error) {
    throw new Error(`Failed to write file: ${error}`);
  }
});

ipcMain.handle('fs:readdir', async (event, dirPath: string) => {
  try {
    const resolvedPath = path.isAbsolute(dirPath) ? dirPath : path.resolve(getAppDirectory(), dirPath);
    const files = await fs.readdir(resolvedPath);
    return files;
  } catch (error) {
    throw new Error(`Failed to read directory: ${error}`);
  }
});

ipcMain.handle('fs:access', async (event, filePath: string) => {
  try {
    const resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(getAppDirectory(), filePath);
    await fs.access(resolvedPath);
    return true;
  } catch {
    return false;
  }
});

ipcMain.handle('fs:stat', async (event, filePath: string) => {
  try {
    const resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(getAppDirectory(), filePath);
    const stats = await fs.stat(resolvedPath);
    return {
      size: stats.size,
      mtime: stats.mtime
    };
  } catch (error) {
    throw new Error(`Failed to get file stats: ${error}`);
  }
});

ipcMain.handle('fs:mkdir', async (event, dirPath: string, options: { recursive: boolean }) => {
  try {
    const appDir = getAppDirectory();
    const resolvedPath = path.isAbsolute(dirPath) ? dirPath : path.resolve(appDir, dirPath);
    await fs.mkdir(resolvedPath, options);
  } catch (error) {
    throw new Error(`Failed to create directory: ${error}`);
  }
});

ipcMain.handle('fs:rm', async (event, filePath: string, options: { recursive: boolean; force: boolean }) => {
  try {
    const resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(getAppDirectory(), filePath);
    await fs.rm(resolvedPath, options);
  } catch (error) {
    throw new Error(`Failed to remove: ${error}`);
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
